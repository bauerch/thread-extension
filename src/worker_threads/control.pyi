from transitions import Machine, State
from threading import Event
from typing import Optional


class ThreadControlMixin(Machine):
    _INITIAL: State
    _RUNNING = State
    _STOPPED = State
    _PAUSED = State
    _running: Event
    def __init__(self) -> None: ...
    @property
    def state(self) -> str: ...
    def is_initial(self) -> bool: ...
    def is_running(self) -> bool: ...
    def is_paused(self) -> bool: ...
    def is_stopped(self) -> bool: ...
    def running(self) -> None: ...
    def pause(self) -> None: ...
    def resume(self) -> None: ...
    def stop(self) -> None: ...
    def _after_stopped_state(self) -> None: ...
    def _before_running_state(self) -> None: ...
    def _before_paused_state(self) -> None: ...
    def wait(self, timeout: Optional[float] = None) -> bool: ...
